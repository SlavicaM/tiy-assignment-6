// Below is a series of functions, each function has a
// description before it that explains what each of them
// should do. Complete the function so that it satisfies
// it's description.



// 1.
// Should always return the value 5

function giveMeFive() {
    var alwaysFive = 5;
    return alwaysFive;
}
// call function :: return always 5
    giveMeFive(); 

//---------

// 2.
// This function should accept 1 parameter
// and return the exact same thing. This type
// of function is called a no-op as in (no operation)

function noOp(anyValue) {
    return anyValue;
}

// call function :: return "Anything"
noOp("Anything"); 

//---------

// 3.
// This function should accept 1 parameter; a number.
// It should return the number doubled. Doubled meaning
// it should return a number twice the size as the number
// that is passed in.

function double(number) {
    return number* 2;
}

//call function :: return 18
double(9); // 

//---------

// 4.
// This function should accept 1 parameter; a number.
// It should return the number squared. Squared meaning
// it should return the number multiplied by itself.

function square(number) {
    return number * number;
}

// call function :: return 81
square(9); 

//---------

// 5.
// This function should accept 1 parameter; an array
// of numbers. It should calculate the sum (the total
// of all the numbers in the array added together)
// and return it.

// calculate array content without using loop
//static solution
function sum(arr) {
  var arr = [1,2,3,4,5];
 
  return arr[0] + arr[1] + arr[2] + arr[3] + arr[4];
}

// calculate array content using loop
//dynamic solution
function sum(arr) {
    var total = 0;
    for (i = 0; i < arr.length; i++) {
        total += arr[i];
    }
    return total;
}

//call function
 sum(arr = [1,2,3,4,5]); 

//---------

// 6.
// This function should accept 1 parameter; a single
// letter string (like "g".) It should return the index
// of that letter in the alphabet. For example "a" would
// be 1 and "z" would be 26. This should work for both
// lowercase and capital letters.

// HINT: use an array and a for loop
// Print Letters
function letterIndex(singleLetter) {
  var letters = "abcdefghijklmnopqrstuvwxyz";
  //turn letters into an array
  letters.split("");

    for(i = 0; i < letters.length; i++) {
         var currentLetter = letters[i];
        if (currentLetter === (singleLetter.toLowerCase() || singleLetter.toUpperCase()) ) {
            return i;
        }
    }
}

//call function :: return 18
letterIndex("S");

//---------

// 7.
// This function should accept 1 parameter; a number.
// It should return the letter that corresponds with
// that number. For example, 1 would be "a" and 26
// would be "z". This is the inverse of the previous
// function.

// Note: this needs to work for numbers larger than 26.
// For example 27 should loop back around to "a".

// HINT: use an array and the modulo (%) operator

function reverseLetterIndex(letterPosition) { 
   var letters = " abcdefghijklmnopqrstuvwxyz";
   //turn letters into an array
   letters.split("");

  return letters [letterPosition % letters.length];
  }
 //call function :: return "s"
reverseLetterIndex(19);

//---------

// 8.
// This function should accept 1 parameter; a string.
// It should shift every letter in the string by 13
// places. This is a form of Caesar cipher known as
// ROT-13. If you are unsure of exactly what you are
// supposed to do read the wikipedia article that explains
// it quite well: http://en.wikipedia.org/wiki/ROT13

// HINT: use the previous 2 functions
//Used two previously created function to shift single letter
//to be continue...
function rot13(letter) {
  
  return reverseLetterIndex((letterIndex(letter) + 13));

}
